//Патерн "Фабричний метод" надає інтерфейс для створення об'єктів, але дозволяє підкласам вирішувати, який клас інстанціювати.

using FactoryMethod.DeveloperFactory;
using FactoryMethod.HouseFactory;

Developer dev = new PanelDeveloper("PanelDev");
House house = dev.Create();

dev = new WoodDeveloper("WoodDev");
House house2 = dev.Create();

//В якості абстрактного класу Product тут виступає клас House.
//Його дві конкретні реалізації—PanelHouse і WoodHouse—представляють типи будинків, які будуватимуть підрядники.
//В якості абстрактного класу творця виступає Developer, який визначає абстрактний метод Create().
//Цей метод реалізується в класах-нащадках WoodDeveloper і PanelDeveloper.
//І якщо в майбутньому нам потрібно буде побудувати будинки якогось іншого типу, наприклад, цегляні, то ми можемо з легкістю створити новий клас цегляних будинків, успадкований від House, і визначити клас відповідного підрядника.
//Таким чином, система вийде легко розширюваною.
//Проте недоліки патерна теж очевидні—для кожного нового продукту необхідно створювати свій клас творця.